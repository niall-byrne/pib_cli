# Development Environment CLI Configuration
---
- name: "build-docs"
  path_method: "project_docs"
  commands:
    - "make html"
  success: "Documentation Built"
  failure: "Error Building Documentation"
- name: "build-wheel"
  path_method: "project_root"
  commands:
    - "poetry build"
  success: "Wheel Built"
  failure: "Error Building Wheel"
- name: "coverage"
  path_method: "project_root"
  commands: |
    pytest --cov-config=.coveragerc --cov-report term-missing --cov-fail-under=100 --cov="${PROJECT_NAME}" "${PROJECT_NAME}/" ${PIB_OVERLOAD_ARGUMENTS}
    EXIT_CODE="$?"
    coverage html
    exit "${EXIT_CODE}"
  success: "Coverage Passed!"
  failure: "Coverage Failed!"
- name: "fmt"
  path_method: "project_root"
  commands:
    - 'yapf -i --recursive .'
    - 'isort "${PROJECT_NAME}"'
  success: "Formatting Finished!"
  failure: "Formatting Error!"
- name: "leaks"
  container_only: true
  path_method: "project_root"
  commands:
    - 'gitleaks --path=. -v'
  success: "Credential leaks Test Passed!"
  failure: "Credential leaks Test Failed!"
- name: "lint"
  path_method: "project_root"
  commands:
    - 'yamllint *.yml .*.yml assets/ .github/workflows/'
    - 'pydocstyle "${PROJECT_NAME}"'
    - 'pydocstyle --config=.pydocstyle.tests "${PROJECT_NAME}"'
    - 'isort -c "${PROJECT_NAME}"'
    - 'pytest --pylint --pylint-jobs=2 "${PROJECT_NAME}"'
  success: "Linter Test Passed!"
  failure: "Linter Test Failed!"
- name: "reinstall-requirements"
  path_method: "project_root"
  commands:
    - "poetry lock"
    - "poetry install -E docs"
  success: "Reinstall Succeeded!"
  failure: "Reinstall Failed!"
- name: "sectest"
  path_method: "project_root"
  commands:
    - 'bandit -r "${PROJECT_NAME}" -c .bandit.rc --ini .bandit -x tests'
    - 'echo "\nPoetry is exporting the lockfile standby..."'
    - 'poetry export --without-hashes -f requirements.txt | safety check --stdin'
  success: "Security Test Passed!"
  failure: "Security Test Failed!"
- name: "test"
  path_method: "project_root"
  commands:
    - 'pytest ${PIB_OVERLOAD_ARGUMENTS}'
  success: "Unittests Passed!"
  failure: "Unittests Failed!"
- name: "types"
  path_method: "project_root"
  commands:
    - 'mypy ${PROJECT_NAME}'
  success: "Type Check Passed!"
  failure: "Type Check Failed!"
