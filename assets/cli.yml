# Development Environment CLI Configuration
---
metadata:
  project_name: "pib_cli"
  documentation_root: "documentation"
cli_definition:
  - name: "babel-extract"
    description: "Create an updated template file for translations."
    path: "repo_root"
    commands: |
      env PIB_CONFIG_FILE_LOCATION="$(pwd)/../pib_cli/config/default_cli_config.yml" sh -c "
        pybabel extract pib_cli/ -o pib_cli/config/locale/base.pot --omit-header &&
        pybabel update --omit-header -i pib_cli/config/locale/base.pot -o pib_cli/config/locale/en/LC_MESSAGES/base.po -l en -N &&
        pybabel compile -f -i ./pib_cli/config/locale/en/LC_MESSAGES/base.po -o ./pib_cli/config/locale/en/LC_MESSAGES/base.mo
      "
    success: "Template and English translation base generated!"
    failure: "An error occurred!"
  - name: "bump"
    description: "Increment a Major, Minor, or Patch version"
    path: "repo_root"
    commands:
      - './scripts/utilities/version_bump.sh'
    success: "Version incremented and tag created."
    failure: "Could not increment version."
  - name: "build-docs"
    description: "Build the project's documentation."
    path: "documentation_root"
    commands:
      - '[ ! -d build/gettext ] || rm -rf build/gettext'
      - '[ ! -d "./source/codebase/${PIB_PROJECT_NAME}/${PIB_PROJECT_NAME}/_autosummary" ] || rm -rf "./source/codebase/${PIB_PROJECT_NAME}/${PIB_PROJECT_NAME}/_autosummary"'
      - pandoc ../README.md --from markdown --to rst --columns=100 -s -o source/project/introduction.rst
      - |
        env PIB_CONFIG_FILE_LOCATION="$(pwd)/../pib_cli/config/default_cli_config.yml" sh -c "
          make gettext &&
          sphinx-intl update -p build/gettext -l en &&
          make -e SPHINXOPTS=\"-D language='en'\" html
        "
    success: "Documentation Built"
    failure: "Error Building Documentation"
  - name: "build-wheel"
    description: "Build a distribution wheel."
    path: "repo_root"
    commands:
      - "poetry build"
    success: "Wheel Built"
    failure: "Error Building Wheel"
  - name: "coverage"
    description: "Run code coverage test."
    path: "repo_root"
    commands:
      - env PIB_CONFIG_FILE_LOCATION="$(pwd)/../pib_cli/config/default_cli_config.yml" sh -c 'pytest --cov-report term-missing --cov-report html --cov-fail-under=100 --cov="${PIB_PROJECT_NAME}" "${PIB_PROJECT_NAME}/" ${PIB_OVERLOAD_ARGUMENTS}'
    success: "Coverage Passed!"
    failure: "Coverage Failed!"
  - name: "fmt"
    description: "Run code formatters."
    path: "repo_root"
    container_only: true
    commands:
      - '[ ! -z ${PIB_OVERLOAD_ARGUMENTS} ] || ./scripts/utilities/aspell_sort.sh'
      - '[ ! -z ${PIB_OVERLOAD_ARGUMENTS} ] || tomll pyproject.toml'
      - 'yapf -i --recursive ${PIB_OVERLOAD_ARGUMENTS:-.}'
      - 'isort "${PIB_OVERLOAD_ARGUMENTS:-${PIB_PROJECT_NAME}}"'
    success: "Formatting Finished!"
    failure: "Formatting Error!"
  - name: "leaks"
    description: "Run a scan for leaked credentials in commits."
    container_only: true
    path: "repo_root"
    commands:
      - 'gitleaks detect -v'
    success: "Credential leaks Test Passed!"
    failure: "Credential leaks Test Failed!"
  - name: "lint"
    description: "Run the code linters."
    path: "repo_root"
    commands:
      - 'shellcheck ${PIB_PROJECT_NAME}/bash/* -x'
      - 'shellcheck ${PIB_PROJECT_NAME}/container_init.sh'
      - 'darglint "${PIB_PROJECT_NAME}"'
      - 'pydocstyle "${PIB_PROJECT_NAME}"'
      - 'pydocstyle --config=.pydocstyle.tests "${PIB_PROJECT_NAME}"'
      - 'yamllint .'
      - 'isort -c "${PIB_PROJECT_NAME}"'
      - 'pytest --pylint --pylint-jobs=2 "${PIB_PROJECT_NAME}"'
    success: "Linter Test Passed!"
    failure: "Linter Test Failed!"
  - name: "reinstall-requirements"
    description: "Reinstall the project requirements."
    path: "repo_root"
    commands:
      - "poetry lock"
      - "poetry install -E docstrings -E docs -E types -E pib_docs"
    success: "Reinstall Succeeded!"
    failure: "Reinstall Failed!"
  - name: "sectest"
    description: "Run the security tests."
    path: "repo_root"
    commands:
      - 'bandit -r "${PIB_PROJECT_NAME}" -c pyproject.toml -x tests'
      - 'echo "\nPoetry is exporting the lockfile standby..."'
      - 'poetry export --without-hashes -f requirements.txt | safety check --stdin -i 41002'
    success: "Security Test Passed!"
    failure: "Security Test Failed!"
  - name: "test"
    description: "Run the unittests."
    path: "repo_root"
    commands:
      - env PIB_CONFIG_FILE_LOCATION="$(pwd)/../pib_cli/config/default_cli_config.yml" sh -c 'pytest ${PIB_OVERLOAD_ARGUMENTS}'
    success: "Unittests Passed!"
    failure: "Unittests Failed!"
  - name: "types"
    description: "Run the type checker."
    path: "repo_root"
    commands:
      - 'mypy --strict --show-error-codes --implicit-reexport ${PIB_PROJECT_NAME}'
    success: "Type Check Passed!"
    failure: "Type Check Failed!"
