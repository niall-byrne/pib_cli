# Development Environment CLI Configuration
---
- name: "babel-extract"
  description: "Create an updated template file for translations."
  path: "git_root"
  commands:
    - "pybabel extract pib_cli/ -o pib_cli/config/locale/base.pot --omit-header"
    - "pybabel update --omit-header -i pib_cli/config/locale/base.pot -o pib_cli/config/locale/en/LC_MESSAGES/base.po -l en -N"
    - "pybabel compile -f -i ./pib_cli/config/locale/en/LC_MESSAGES/base.po -o ./pib_cli/config/locale/en/LC_MESSAGES/base.mo"
  success: "Template and English translation base generated!"
  failure: "An error occurred!"
- name: "build-docs"
  description: "Build the project's documentation."
  path: "documentation_root"
  commands:
    - if [ ! -d "./source/codebase/${PROJECT_NAME}/${PROJECT_NAME}/_autosummary" ]; then rm -rf "./source/codebase/${PROJECT_NAME}/${PROJECT_NAME}/_autosummary"; fi
    - "make gettext"
    - "sphinx-intl update -p build/gettext -l en"
    - make -e SPHINXOPTS="-D language='en'" html
  success: "Documentation Built"
  failure: "Error Building Documentation"
- name: "build-wheel"
  description: "Build a distribution wheel."
  path: "git_root"
  commands:
    - "poetry build"
  success: "Wheel Built"
  failure: "Error Building Wheel"
- name: "coverage"
  description: "Run code coverage test."
  path: "git_root"
  commands: |
    pytest --cov-config=.coveragerc --cov-report term-missing --cov-fail-under=100 --cov="${PROJECT_NAME}" "${PROJECT_NAME}/" ${PIB_OVERLOAD_ARGUMENTS}
    EXIT_CODE="$?"
    coverage html
    exit "${EXIT_CODE}"
  success: "Coverage Passed!"
  failure: "Coverage Failed!"
- name: "fmt"
  description: "Run code formatters."
  path: "git_root"
  container_only: true
  commands:
    - |
      cat .aspell.pws | tail -n +2 | sort --unique > .aspell.pws.swp
      sed "1s/^/personal_ws-1.1 en $(wc -l .aspell.pws.swp | awk '{print $1}')\n/" .aspell.pws.swp > .aspell.pws
      rm .aspell.pws.swp
    - 'tomll pyproject.toml'
    - 'yapf -i --recursive .'
    - 'isort "${PROJECT_NAME}"'
  success: "Formatting Finished!"
  failure: "Formatting Error!"
- name: "leaks"
  description: "Run a scan for leaked credentials in commits."
  container_only: true
  path: "git_root"
  commands:
    - 'gitleaks detect -v'
  success: "Credential leaks Test Passed!"
  failure: "Credential leaks Test Failed!"
- name: "lint"
  description: "Run the code linters."
  path: "git_root"
  commands:
    - 'shellcheck ${PROJECT_NAME}/bash/* -x'
    - 'shellcheck ${PROJECT_NAME}/container_init.sh'
    - 'darglint "${PROJECT_NAME}"'
    - 'pydocstyle "${PROJECT_NAME}"'
    - 'pydocstyle --config=.pydocstyle.tests "${PROJECT_NAME}"'
    - 'yamllint . ${PROJECT_NAME}/config/ assets/ .github/workflows/'
    - 'isort -c "${PROJECT_NAME}"'
    - 'pytest --pylint --pylint-jobs=2 "${PROJECT_NAME}"'
  success: "Linter Test Passed!"
  failure: "Linter Test Failed!"
- name: "reinstall-requirements"
  description: "Reinstall the project requirements."
  path: "git_root"
  commands:
    - "poetry lock"
    - "poetry install -E pib_docs"
  success: "Reinstall Succeeded!"
  failure: "Reinstall Failed!"
- name: "sectest"
  description: "Run the security tests."
  path: "git_root"
  commands:
    - 'bandit -r "${PROJECT_NAME}" -c pyproject.toml -x tests'
    - 'echo "\nPoetry is exporting the lockfile standby..."'
    - 'poetry export --without-hashes -f requirements.txt | safety check --stdin -i 41002'
  success: "Security Test Passed!"
  failure: "Security Test Failed!"
- name: "test"
  description: "Run the unittests."
  path: "git_root"
  commands:
    - 'pytest ${PIB_OVERLOAD_ARGUMENTS}'
  success: "Unittests Passed!"
  failure: "Unittests Failed!"
- name: "types"
  description: "Run the type checker."
  path: "git_root"
  commands:
    - 'mypy --strict --show-error-codes --implicit-reexport ${PROJECT_NAME}'
  success: "Type Check Passed!"
  failure: "Type Check Failed!"
