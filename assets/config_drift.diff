1c1
< # Development Environment CLI Configuration
---
> # The default PIB CLI configuration.
3,5d2
< metadata:
<   project_name: "pib_cli"
<   documentation_root: "documentation"
7,39d3
<   - name: "babel-extract"
<     description: "Create an updated template file for translations."
<     path: "repo_root"
<     commands: |
<       env PIB_CONFIG_FILE_LOCATION="$(pwd)/../pib_cli/config/default_cli_config.yml" sh -c "
<         pybabel extract pib_cli/ -o pib_cli/config/locale/base.pot --omit-header &&
<         pybabel update --omit-header -i pib_cli/config/locale/base.pot -o pib_cli/config/locale/en/LC_MESSAGES/base.po -l en -N &&
<         pybabel compile -f -i ./pib_cli/config/locale/en/LC_MESSAGES/base.po -o ./pib_cli/config/locale/en/LC_MESSAGES/base.mo
<       "
<     success: "Template and English translation base generated!"
<     failure: "An error occurred!"
<   - name: "bump"
<     description: "Increment a Major, Minor, or Patch version"
<     path: "repo_root"
<     commands:
<       - './scripts/utilities/version_bump.sh'
<     success: "Version incremented and tag created."
<     failure: "Could not increment version."
<   - name: "build-docs"
<     description: "Build the project's documentation."
<     path: "documentation_root"
<     commands:
<       - '[ ! -d build/gettext ] || rm -rf build/gettext'
<       - '[ ! -d "./source/codebase/${PIB_PROJECT_NAME}/${PIB_PROJECT_NAME}/_autosummary" ] || rm -rf "./source/codebase/${PIB_PROJECT_NAME}/${PIB_PROJECT_NAME}/_autosummary"'
<       - pandoc ../README.md --from markdown --to rst --columns=100 -s -o source/project/introduction.rst
<       - |
<         env PIB_CONFIG_FILE_LOCATION="$(pwd)/../pib_cli/config/default_cli_config.yml" sh -c "
<           make gettext &&
<           sphinx-intl update -p build/gettext -l en &&
<           make -e SPHINXOPTS=\"-D language='en'\" html
<         "
<     success: "Documentation Built"
<     failure: "Error Building Documentation"
51c15
<       - env PIB_CONFIG_FILE_LOCATION="$(pwd)/../pib_cli/config/default_cli_config.yml" sh -c 'pytest --cov-report term-missing --cov-report html --cov-fail-under=100 --cov="${PIB_PROJECT_NAME}" "${PIB_PROJECT_NAME}/" ${PIB_OVERLOAD_ARGUMENTS}'
---
>       - 'pytest --cov-report term-missing --cov-report html --cov-fail-under=100 --cov="${PIB_PROJECT_NAME}" "${PIB_PROJECT_NAME}/" ${PIB_OVERLOAD_ARGUMENTS}'
57d20
<     container_only: true
59,62c22,23
<       - '[ ! -z ${PIB_OVERLOAD_ARGUMENTS} ] || ./scripts/utilities/aspell_sort.sh'
<       - '[ ! -z ${PIB_OVERLOAD_ARGUMENTS} ] || tomll pyproject.toml'
<       - 'yapf -i --recursive ${PIB_OVERLOAD_ARGUMENTS:-.}'
<       - 'isort "${PIB_OVERLOAD_ARGUMENTS:-${PIB_PROJECT_NAME}}"'
---
>       - 'yapf -i --recursive .'
>       - 'isort "${PIB_PROJECT_NAME}"'
65,72d25
<   - name: "leaks"
<     description: "Run a scan for leaked credentials in commits."
<     container_only: true
<     path: "repo_root"
<     commands:
<       - 'gitleaks detect -v'
<     success: "Credential leaks Test Passed!"
<     failure: "Credential leaks Test Failed!"
74d26
<     description: "Run the code linters."
75a28
>     description: "Run the code linters."
77,81d29
<       - 'shellcheck ${PIB_PROJECT_NAME}/bash/* -x'
<       - 'shellcheck ${PIB_PROJECT_NAME}/container_init.sh'
<       - 'darglint "${PIB_PROJECT_NAME}"'
<       - 'pydocstyle "${PIB_PROJECT_NAME}"'
<       - 'pydocstyle --config=.pydocstyle.tests "${PIB_PROJECT_NAME}"'
92c40
<       - "poetry install -E pib_docs"
---
>       - "poetry install"
99c47
<       - 'bandit -r "${PIB_PROJECT_NAME}" -c pyproject.toml -x tests'
---
>       - 'bandit -r "${PIB_PROJECT_NAME}" -x tests'
101c49
<       - 'poetry export --without-hashes -f requirements.txt | safety check --stdin -i 41002'
---
>       - 'poetry export --without-hashes -f requirements.txt | safety check --stdin'
108c56
<       - env PIB_CONFIG_FILE_LOCATION="$(pwd)/../pib_cli/config/default_cli_config.yml" sh -c 'pytest ${PIB_OVERLOAD_ARGUMENTS}'
---
>       - 'pytest ${PIB_OVERLOAD_ARGUMENTS}'
111,117d58
<   - name: "types"
<     description: "Run the type checker."
<     path: "repo_root"
<     commands:
<       - 'mypy --strict --show-error-codes --implicit-reexport ${PIB_PROJECT_NAME}'
<     success: "Type Check Passed!"
<     failure: "Type Check Failed!"
